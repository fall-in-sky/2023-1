#组合 has-a关系使用组合，is-a关系用继承

#使用继承实现代码的复用
class A1:
    def say_al(self):
        print('a1')
class B1(A1):
    pass

b1 = B1()
b1.say_al()
#使用组合实现代码的复用
class A2:
    def say_a2(self):
        print('a2')
class B2:
    def __init__(self,a):
        self.a = a

a2 = A2()
b2 = B2(a2)
b2.a.say_a2()

#测试has-a关系，使用组合
class MP:
    def __init__(self,cpu,screen):
        self.cpu = cpu
        self.screen = screen

class CPU:
    def calculate(self):
        print('123')
        print('cpu对象:',self)

class SCREEN:
    def show(self):
        print('好看')
        print('screen对象:',self)

m = MP(CPU(),SCREEN())
m.cpu.calculate()
m.screen.show()

#设计模式——工厂模式实现
class CarFactory:
    def create_car(self,brand):
        if brand =='奔驰':
            return Benz()
        elif brand =='宝马':
            return BMW()
        elif brand =='比亚迪':
            return BYD()
        else:
            return '未知品牌，无法创建'
class Benz:
    pass
class BMW:
    pass
class BYD:
    pass

factory = CarFactory()
c1 = factory.create_car('奔驰')
print(c1)
c2 = factory.create_car('比亚迪')
print(c2)

#设计模式——单例模式实现
class Mysingleton:

    __obj = None    #类属性
    __init_flag = True
    def __new__(cls, *args, **kwargs):
        if cls.__obj ==None:
            cls.__obj = object.__new__(cls)
        return cls.__obj
    def __init__(self,name):
        if Mysingleton.__init_flag:
            print('init……')
            self.name = name
            Mysingleton.__init_flag = False
a = Mysingleton('aa')
b = Mysingleton('BB')
print(a)
print(b)
c = Mysingleton('cc')
print(c)

#设计模式——工厂模式和单例模式的整合使用
class CarFactory:
    __obj = None    #类属性
    __init_flag = True

    def create_car(self,brand):
        if brand =='奔驰':
            return Benz()
        elif brand =='宝马':
            return BMW()
        elif brand =='比亚迪':
            return BYD()
        else:
            return '未知品牌，无法创建'
    def __new__(cls, *args, **kwargs):
        if cls.__obj ==None:
            cls.__obj = object.__new__(cls)
        return cls.__obj
    def __init__(self):
        if CarFactory.__init_flag:
            print('init CarFactory……')
            CarFactory.__init_flag = False

class Benz:
    pass
class BMW:
    pass
class BYD:
    pass

factory = CarFactory()
c1 = factory.create_car('奔驰')
print(c1)
c2 = factory.create_car('比亚迪')
print(c2)

factory2 = CarFactory()
print(factory)
print(factory2)

#什么是模块：只要以.py为后缀的文件，都可以被称为模块
# 模块中可以包含1变量2函数3class面向对象（类——对象）4可执行代码
#使用模块有什么好处？管理方便易维护，降低复杂度
PI=3.14
def get_area(r):    #求圆面积的方法，r:半斤，return:圆的面积
    return PI*r*r
class Student():
    def __init__(self,name,age):
        self.name = name
        self.age = age
    def show_info(self):    #展示学生信息
        print('name:%s age:%d'%(self.name,self.age))

get_area(2)
print('半径为2的圆面积为:')
print(get_area(2))
stu =Student('学生1',18)
stu.show_info()
'''
如何使用模块：自定义模块，导入模块
导入后1模块名.变量，2模块名.函数名（参数），3模块名.类
导入模块的方式
'''
import random
result =random.randint(1,6)
print(result)

from random import randint
result =random.randint(1,6)
print((result))

'''
自定义一个模块
实现数学四则运算
两个数的加减乘除运算
'''
def add(a,b):
    return a+b
def sub(a,b):
    return a-b
def mul(a,b):
    return a*b
def div(a,b):
    return a/b
if __name__ == '__main__':
    result
a = 10
b = 2
print('和：%g'%add(a,b))    #其余同理
#__main__
print(__name__)
#开一个新的文件.py——导入自定义模块
#import '旧文件' 在自定义模块中：新增控制代码：if __name__ == '__main__' 测试代码执行
#from 旧文件 import add,sub(变量,类,函数,*默认导入所有功能)
x=10
y=20
print('和：%g''旧文件.百分号在文件名前' %add(x,y))
print('减：%g''旧文件.百分号在文件名前' %sub(x,y))

__all__=['add','sub']    #手动添加全局变量__all__之后,from x import * 将不再是导入所有，而是一部分

#Python中的包package，概念是包括__init__.py的文件夹
#将模块归类，方便整理，防止模块名冲突
#模块中的包名字会产生变化 包名.模块名

import package1.Mymath
result = package1.Mymath.add(11,12)
print(result)

print('a')

import package1.Mymath
result = package1.Mymath.add(11,12)
print(result)

from package1.Mymath import *
result = add(14,15)
print(result)

result = mul(14,15)
print(result)

'''
package
模块
__init__.py
类中的，__init__初始化方法
包中__init__.py初始化模块
初始化
首次使用包中的模块时，__init__.py模块会被执行一次
__init__.py可以存放普通模块一样的代码
一般会写一些辅助代码，让你更方便使用
这种方式等价于在测试文件中使用import包.模块

#print('1')
import package1.Mymath
import sys
list1 = sys.path
print(type(list1))
for path in list1:
    print(path)


在测试文件中，from 包 import *也可以在__init__里面添加
'''
'''
1、模块的发布
  a.为什么要发布
    系统可以用，自定义不好用
    
  b.sys.path
    导入模块时，搜索路径列表
    如果所有路径中都没有要导入的模块，会导致无法导入目标模块
    解决方案：
    1.将模块所在路径手动加入到sys.path
    2.将自定义模块发布到系统目录
      发布自定义模块的步骤：
      1确定的发布的模块（目录结构）
        setup.py
        package
          自定义模块
      2setup的编辑工作
        setup()
      3构建
        python setup.py build
      4发布
        python setup.py sdist
        
        from distutils.core import setup
setup(name='秦',version='1.0',description='人列计算机',
      author='冯诺依曼',py_modules=['package1.Mymath',])
        
      
2、模块的安装
  2.1 通过命令完成安装-安全
     a.找到之前发布的压缩包，解压操作
     b.进入文件夹，执行命令 python setup.py install
          
  2.2 暴力安装
     直接将要安装的包以及模块，复制对应的系统目录中
     
'''
import sys
list1 = sys.path
print(type(list1))
for path in list1:
    print(path)
#手动添加Mymath,路径分隔符两种表示方式：1.'/' 2.'\\'
sys.path.append('D:\pythonProject\package1')
list1 = sys.path
print(type(list1))
for path in list1:
    print(path)
import Mymath
print(Mymath.add(12,13))

'''
异常 异常就是不正常，python检测到错误后，解释器无法继续执行
案例 需求：输入被除数和除数，求商并打印结果
a,b,c
问题：1、str->int 如果str不是纯数字
2、0做被除数
解决方案 使用if-else 但业务偏移
        try:可能出现问题的代码
        except:出现问题后执行的代码块
'''
#str->int
a= input('输入被除数')
b= input('输入除数')
if a.isdigit() and b.isdigit():
    a =int(a)
    b =int(b)
    if b !=0:
        #求商
        c=a/b
        print('商为:%g'%c)
    else:
        print('除数不为0')
else:
    print('数字类型有误')

try:
    a = int(a)
    b = int(b)
    # 求商
    c = a / b
    print('商为:%g' % c)
except:
    print('异常')

'''
异常 异常就是不正常，python检测到错误后，解释器无法继续执行
案例 需求：输入被除数和除数，求商并打印结果
a,b,c
问题：1、str->int 如果str不是纯数字
2、0做被除数
解决方案 使用if-else 但业务偏移
        try:可能出现问题的代码
        except:出现问题后执行的代码块

        except 异常1:
        except 异常2:
        except 异常3:
        except 异常 as 变量：

        else:
            没有异常，执行的代码
        finally:
            最终一定要执行的代码
        案例：将一些字符串数据写入到文件中
'''
#str->int
a= input('输入被除数')
b= input('输入除数')
try:
    a = int(a)
    b = int(b)
    # 求商
    c = a / b
    print('商为:%g' % c)
#except BaseException:
#    print('其他异常2')
except (Exception,ValueError,ZeroDivisionError) as e:
    print(type(e))
    #错误信息
    print(e.args)
    print('遇到异常')    #使用元组储存异常时，没有异常的顺序要求
except ValueError:
    print('数据类型异常')
except ZeroDivisionError:
    print('除数不为0')
except Exception:
    print('其他异常')    #收底工作
except BaseException:
    print('其他异常2')     #多个异常的情况下，子类在前，父类在后

try:
    file =open('123.txt','w',encoding='utf-8')
    file.write('HELLO')
    file.write('WORLD')
#write 只能将字符串数据写入到文件
    file.write([1,2,3])
    print('写入完毕')
except Exception as e:
    print(e.args)
else:
    print('没有异常，操作成功')
finally:
    # 最终一定要执行的代码 关闭文件
    file.close()
    print('关闭文件，谢谢使用')
