#类属性
class Student:
    company ='gg'
    count = 0
    def __init__(self,name,score):
        self.name = name    #实例属性
        self.score = score
        Student.count = Student.count+1
    def say_score(self):    #实例方法
        print('我的公司是：',Student.company)
        print(self.name,'的分数是：',self.score)
s1 = Student('zz',80)    #s1是实例对象，自动调用__init__()方法
s1.say_score()
print('共创建{0}个Student对象'.format(Student.count))

#类方法
class Section:
    camp = 'aa'   #类属性
    @classmethod
    def printcamp(cls):
        print(cls.camp)
        #self     #类方法和静态方法不能调用实例
Section.printcamp()

class Section2:
    camp = 'aa'   #类属性
    @staticmethod
    def add(a,b):    #静态方法
        print('{0}+{1}={2}'.format(a,b,(a+b)))
        return a+b
Section2.add(12,24)

#__del__方法（析构函数）和垃圾回收机制
class Person:
    def __del__(self):
        print('销毁对象：{0}'.format(self))
p1 =Person()
P2 =Person()
del P2
print('程序结束')
print(p1)
#print(p2)    已经被销毁了

#__call__方法和可调用对象
class SalaryAccount:
    '''工资计算类'''
    def __call__(self, salary):
         print("工资……")
         yearSalary = salary*12
         daySalary = salary//21.5
         hourSalary = daySalary//8
         return dict(yearSalary=yearSalary,daySalary=daySalary,hourSalary=hourSalary)
s = SalaryAccount()
print(s(7000))

#PYTHON方法没有重载,定义多个同名方法，只有最后一个有效
class Person:
    def say_hi(self):
        print('hello')
def play_game(s):
    print('{0}在玩游戏'.format(s))
def work2(s):
    print('好好工作')
Person.play = play_game;
p = Person()
p.say_hi()
p.play()     #Person.play(p)
Person.say_hi =work2
p.say_hi()

#私有属性和私有方法（实现封装）
class Employee:
    __company = '程序员'

    def __init__(self,name,age):
        self.name = name    #实例属性
        self.__age =age    #私有属性

    def __work(self):    #私有方法
        print('ddd')
        print('{0}'.format(self.__age))
        print(Employee.__company)
e =Employee('gg',11)
print(e.name)
#print(e.age)
print(e._Employee__age)
print(dir(e))
e._Employee__work()
print(Employee._Employee__company)

#测试@property的用法
class Employee:
    @property
    def salary(self):
        print('salary run……')
        return 10000
emp1 = Employee()
#emp1.salary()
print(emp1.salary)

class Employee:

    def __init__(self,name,salary):
        self.__name = name
        self.__salary = salary

    @property
    def salary(self):
        return self.__salary
    @salary.setter
    def salary(self,salary):
        if 1000<salary<50000:
            self.__salary = salary
        else:
            print('录入错误！')
'''
    def get_salary(self):
        return self.__salary
    def set_salary(self,salary):
        if 1000<salary<50000:
            self.__salary = salary
        else:
            print('录入错误！')
'''
emp1 = Employee('dd',30000)
'''
print(emp1.get_salary())
emp1.set_salary(2000)
print(emp1.get_salary())
'''
print(emp1.salary)
emp1.salary = 2000
print(emp1.salary)

#面向对象三大特征——封装、继承、多态
#继承——父类——子类
def animals():
    if True:
        print("mammals")
        if animals(0):
            print("tiger")
        elif animals(1):
            print("monkey")
        elif animals(2):
            print("wolf")


    else:
        print("others")
#不知道怎么使上面的代码运行，下次再看看吧
class Person:    #父类
    def __init__(self,name,age):
        self.name = name
        self.__age =age     #私有属性（可以继承但不能直接用）

    def say_age(self):
        print("年龄：")

class Student(Person):    #子类
    def __init__(self,name,age,score):
        Person.__init__(self,name,age)    #必须显示的调用父类初始化方法，不然解释器不会去调用
        self.score = score
#Student-->Person-->object类
print(Student.mro())

s = Student('g',18,60)
print(s.name)
s.say_age()
#print(s.age)
print(s._Person__age)
print(dir(s))

#类成员的继承和重写
class Person:    #父类
    def __init__(self,name,age):
        self.name = name
        self.__age =age     #私有属性（可以继承但不能直接用）

    def say_age(self):
        print("年龄：",self.__age)

    def say_introduce(self):
        print('我的名字是{0}'.format(self.name))

class Student(Person):    #子类
    def __init__(self,name,age,score):
        Person.__init__(self,name,age)    #必须显示的调用父类初始化方法，不然解释器不会去调用
        self.score = score

    def say_introduce(self):
        '''重写了父类的方法'''
        print('报告老师，我的名字是{0}'.format(self.name))

s = Student("g",18,80)
s.say_age()
s.say_introduce()

#类的继承层次结构
class A:pass
class B(A):pass

#测试重写object的__str__()
class Person:    #默认继承object类
    def __init__(self,name):
        self.name = name
    def __str__(self):
        return '名字是：{0}'.format(self.name)
p = Person('gg')
print(p)

#多重继承Python支持多重继承，一个子类可以有多个“直接父类”
class A:
    def aa(self):
        print('aa')
    def say(self):
        print('r')
class B:
    def bb(self):
        print('bb')
    def say(self):
            print("k")
class C(B,A):
    def cc(self):
        print('cc')
c = C()
c.cc()
c.bb()
c.aa()

#mro()
print(C.mro())
c.say()

#测试super()获取父类定义，而非父类对象
class A:

    def say(self):
        print('r：',self)
class B:
    def say(self):
        A.say(self)
        #super().say()    #疑似讲课有误
        print('k：',self)
B().say()
